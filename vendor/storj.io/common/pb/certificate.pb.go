// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: certificate.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"

	drpc "storj.io/drpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SigningRequest struct {
	AuthToken            string   `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningRequest) Reset()         { *m = SigningRequest{} }
func (m *SigningRequest) String() string { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()    {}
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{0}
}
func (m *SigningRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningRequest.Unmarshal(m, b)
}
func (m *SigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningRequest.Marshal(b, m, deterministic)
}
func (m *SigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningRequest.Merge(m, src)
}
func (m *SigningRequest) XXX_Size() int {
	return xxx_messageInfo_SigningRequest.Size(m)
}
func (m *SigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigningRequest proto.InternalMessageInfo

func (m *SigningRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *SigningRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SigningResponse struct {
	Chain                [][]byte `protobuf:"bytes,1,rep,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningResponse) Reset()         { *m = SigningResponse{} }
func (m *SigningResponse) String() string { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()    {}
func (*SigningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{1}
}
func (m *SigningResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningResponse.Unmarshal(m, b)
}
func (m *SigningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningResponse.Marshal(b, m, deterministic)
}
func (m *SigningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningResponse.Merge(m, src)
}
func (m *SigningResponse) XXX_Size() int {
	return xxx_messageInfo_SigningResponse.Size(m)
}
func (m *SigningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SigningResponse proto.InternalMessageInfo

func (m *SigningResponse) GetChain() [][]byte {
	if m != nil {
		return m.Chain
	}
	return nil
}

func init() {
	proto.RegisterType((*SigningRequest)(nil), "node.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "node.SigningResponse")
}

func init() { proto.RegisterFile("certificate.proto", fileDescriptor_c0d34c34dd33be4b) }

var fileDescriptor_c0d34c34dd33be4b = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4e, 0x2d, 0x2a,
	0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9,
	0xcb, 0x4f, 0x49, 0x55, 0xf2, 0xe5, 0xe2, 0x0b, 0xce, 0x4c, 0xcf, 0xcb, 0xcc, 0x4b, 0x0f, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe5, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9, 0x88, 0x2f, 0xc9,
	0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x04, 0x89, 0x84, 0x80, 0x04,
	0x84, 0x64, 0xb8, 0x38, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0x14,
	0x18, 0x35, 0x98, 0x83, 0x10, 0x02, 0x4a, 0xea, 0x5c, 0xfc, 0x70, 0xe3, 0x8a, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x85, 0x44, 0xb8, 0x58, 0x93, 0x33, 0x12, 0x33, 0x41, 0x46, 0x31, 0x6b, 0xf0, 0x04,
	0x41, 0x38, 0x46, 0xce, 0x5c, 0x3c, 0xce, 0x08, 0x27, 0x15, 0x0b, 0x19, 0x73, 0xb1, 0x80, 0x34,
	0x0a, 0x89, 0xe8, 0x81, 0x9c, 0xa5, 0x87, 0xea, 0x26, 0x29, 0x51, 0x34, 0x51, 0x88, 0xd1, 0x4e,
	0x2c, 0x51, 0x4c, 0x05, 0x49, 0x49, 0x6c, 0x60, 0xff, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0xa9, 0xdc, 0xdc, 0xe4, 0x00, 0x00, 0x00,
}

type DRPCCertificatesClient interface {
	DRPCConn() drpc.Conn

	Sign(ctx context.Context, in *SigningRequest) (*SigningResponse, error)
}

type drpcCertificatesClient struct {
	cc drpc.Conn
}

func NewDRPCCertificatesClient(cc drpc.Conn) DRPCCertificatesClient {
	return &drpcCertificatesClient{cc}
}

func (c *drpcCertificatesClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcCertificatesClient) Sign(ctx context.Context, in *SigningRequest) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := c.cc.Invoke(ctx, "/node.Certificates/Sign", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCCertificatesServer interface {
	Sign(context.Context, *SigningRequest) (*SigningResponse, error)
}

type DRPCCertificatesDescription struct{}

func (DRPCCertificatesDescription) NumMethods() int { return 1 }

func (DRPCCertificatesDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/node.Certificates/Sign",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCCertificatesServer).
					Sign(
						ctx,
						in1.(*SigningRequest),
					)
			}, DRPCCertificatesServer.Sign, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterCertificates(srv drpc.Server, impl DRPCCertificatesServer) {
	srv.Register(impl, DRPCCertificatesDescription{})
}

type DRPCCertificates_SignStream interface {
	drpc.Stream
	SendAndClose(*SigningResponse) error
}

type drpcCertificatesSignStream struct {
	drpc.Stream
}

func (x *drpcCertificatesSignStream) SendAndClose(m *SigningResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificatesClient is the client API for Certificates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificatesClient interface {
	Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
}

type certificatesClient struct {
	cc *grpc.ClientConn
}

func NewCertificatesClient(cc *grpc.ClientConn) CertificatesClient {
	return &certificatesClient{cc}
}

func (c *certificatesClient) Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := c.cc.Invoke(ctx, "/node.Certificates/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificatesServer is the server API for Certificates service.
type CertificatesServer interface {
	Sign(context.Context, *SigningRequest) (*SigningResponse, error)
}

func RegisterCertificatesServer(s *grpc.Server, srv CertificatesServer) {
	s.RegisterService(&_Certificates_serviceDesc, srv)
}

func _Certificates_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Certificates/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Sign(ctx, req.(*SigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Certificates",
	HandlerType: (*CertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Certificates_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}
